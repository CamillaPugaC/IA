import numpy as np
import pandas as pd
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tabulate import tabulate
import os

def limpiar_pantalla():
    os.system('clear' if os.name == 'posix' else 'cls')

def entrenar_red_neuronal(entrada, salida, num_epocas, capas_ocultas):
    X = np.array(entrada, dtype='float32')
    Y = np.array(salida, dtype='float32')

    modelo = Sequential()
    for i, neuronas in enumerate(capas_ocultas):
        if i == 0:
            modelo.add(Dense(units=neuronas, activation='relu', input_dim=X.shape[1]))
        else:
            modelo.add(Dense(units=neuronas, activation='relu'))
    modelo.add(Dense(units=1, activation='sigmoid'))

    modelo.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=['accuracy'])
    print("\n\tÉpocas:\n")

    for epoca in range(num_epocas):
        modelo.fit(X, Y, epochs=1, verbose=0)
        perdida, precision = modelo.evaluate(X, Y, verbose=0)
        print(f"\nÉpoca {epoca + 1} - Pérdida: {perdida} \nPrecisión: {precision}")

        y_predicho = modelo.predict(X)
        resultados_df = pd.DataFrame(data=np.concatenate((X, y_predicho, Y.reshape(-1, 1)), axis=1),
                                     columns=[f'X{i + 1}' for i in range(X.shape[1])] + ['Yc', 'Ye'])

        # Modificación para personalizar la tabla
        tabla_str = tabulate(resultados_df, headers='keys', tablefmt='pretty', showindex=False)
        print(f"\nTabla {epoca + 1}:\n")
        print(tabla_str)

def obtener_entrada_usuario():
    num_epocas = int(input("Épocas: "))
    cant_capas = int(input("Capas ocultas: "))
    capas_ocultas = [int(input(f"Neurona {i + 1}: ")) for i in range(cant_capas)]
    return num_epocas, capas_ocultas

def mostrar_menu():
    print("\n\t\t Menú:\n")
    print("1.- Operación AND")
    print("2.- Operación OR")
    print("3.- Operación XOR")
    print("4.- Ejercicio 1")
    print("5.- Mayoría Simple")
    print("6.- Paridad")
    print("7.- Salir")

def menu_principal():
    while True:
        mostrar_menu()
        opcion = int(input("\n\tElige una opción: "))

        if opcion == 7:
            limpiar_pantalla()
            input("\n\t¡Hasta luego!")
            break

        if opcion == 1:
            limpiar_pantalla()
            entrada_and = [[0, 0], [0, 1], [1, 0], [1, 1]]
            salida_and = [0, 0, 0, 1]
            print("\n\tOPERACIÓN AND\n")
            num_epocas, capas_ocultas = obtener_entrada_usuario()
            entrenar_red_neuronal(entrada_and, salida_and, num_epocas, capas_ocultas)
            input("\n\tPresiona Enter para regresar al menú")
        elif opcion == 2:
            limpiar_pantalla()
            entrada_or = [[0, 0], [0, 1], [1, 0], [1, 1]]
            salida_or = [0, 1, 1, 1]
            print("\n\tOPERACIÓN OR\n")
            num_epocas, capas_ocultas = obtener_entrada_usuario()
            entrenar_red_neuronal(entrada_or, salida_or, num_epocas, capas_ocultas)
            input("\n\tPresiona Enter para regresar al menú")
        elif opcion == 3:
            limpiar_pantalla()
            tabla_xor = [[0, 0], [0, 1], [1, 0], [1, 1]]
            y_xor = [0, 1, 1, 0]
            print("\n\tOPERACIÓN XOR\n")
            print("\n\tXOR\n")
            epocas, capas = obtener_entrada_usuario()
            entrenar_red_neuronal(tabla_xor, y_xor, epocas, capas)
            input("\n\tPresiona Enter para regresar al menú")
        elif opcion == 4:
            limpiar_pantalla()
            tabla_ex1 = [[2, 0], [0, 0], [2, 2], [0, 1], [1, 1], [1, 2]]
            y_ex1 = [1, 0, 1, 0, 1, 0]
            print("\n\tEjercicio 1\n")
            epocas, capas = obtener_entrada_usuario()
            entrenar_red_neuronal(tabla_ex1, y_ex1, epocas, capas)
            input("\n\tPresiona Enter para regresar al menú")
        elif opcion == 5:
            limpiar_pantalla()
            tabla_maj = [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]
            y_maj = [0, 0, 0, 1, 0, 1, 1, 1]
            print("\n\tMayoría Simple\n")
            epocas, capas = obtener_entrada_usuario()
            entrenar_red_neuronal(tabla_maj, y_maj, epocas, capas)
            input("\n\tPresiona Enter para regresar al menú")
        elif opcion == 6:
            limpiar_pantalla()
            tabla_parity = [
                [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 1],
                [0, 1, 0, 0], [0, 1, 0, 1], [0, 1, 1, 0], [0, 1, 1, 1],
                [1, 0, 0, 0], [1, 0, 0, 1], [1, 0, 1, 0], [1, 0, 1, 1],
                [1, 1, 0, 0], [1, 1, 0, 1], [1, 1, 1, 0], [1, 1, 1, 1]
            ]
            y_parity = [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1]
            print("\n\tParidad\n")
            epocas, capas = obtener_entrada_usuario()
            entrenar_red_neuronal(tabla_parity, y_parity, epocas, capas)
            input("\n\tPresiona Enter para regresar al menú")

menu_principal()
